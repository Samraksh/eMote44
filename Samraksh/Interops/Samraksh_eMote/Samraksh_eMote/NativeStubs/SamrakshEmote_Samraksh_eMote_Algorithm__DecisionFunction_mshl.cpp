//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "SamrakshEmote.h"
#include "SamrakshEmote_Samraksh_eMote_Algorithm__DecisionFunction.h"

using namespace Samraksh::eMote;


HRESULT Library_SamrakshEmote_Samraksh_eMote_Algorithm__DecisionFunction::Initialize___VOID__U2__U2__R4__R4__SZARRAY_R4__SZARRAY_R4__SZARRAY_R4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        UINT16 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT16( stack, 1, param0 ) );

        UINT16 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT16( stack, 2, param1 ) );

        float param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 3, param2 ) );

        float param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float( stack, 4, param3 ) );

        CLR_RT_TypedArray_float param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float_ARRAY( stack, 5, param4 ) );

        CLR_RT_TypedArray_float param5;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float_ARRAY( stack, 6, param5 ) );

        CLR_RT_TypedArray_float param6;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float_ARRAY( stack, 7, param6 ) );

        Algorithm_DecisionFunction::Initialize( pMngObj,  param0, param1, param2, param3, param4, param5, param6, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_SamrakshEmote_Samraksh_eMote_Algorithm__DecisionFunction::NormalizeFeatureVector___VOID__SZARRAY_R4__SZARRAY_I4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_float param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        Algorithm_DecisionFunction::NormalizeFeatureVector( pMngObj,  param0, param1, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_SamrakshEmote_Samraksh_eMote_Algorithm__DecisionFunction::Decide___R4__SZARRAY_I4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_INT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 1, param0 ) );

        float retVal = Algorithm_DecisionFunction::Decide( pMngObj,  param0, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_float( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}
